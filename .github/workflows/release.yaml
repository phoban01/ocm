name: Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        type: choice
        description: "Release Type"
        required: true
        default: "patch"
        options:
        - patch
        - minor
        - major
      release_candidate:
        type: boolean
        description: "Release Candidate"
        required: false
        default: false

jobs:
  release:
    name: Trigger release build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      repository-projects: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version-file: '${{ github.workspace }}/go.mod'
    - name: Cache go-build and mod
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build/
          ~/go/pkg/mod/
        key: go-${{ hashFiles('go.sum') }}
        restore-keys: |
          go-
    - name: Set release version
      run: |
        if ${{ inputs.release_candidate }}; then
          go run $GITHUB_WORKSPACE/pkg/version/bump --type ${{ inputs.releaseType }} --pre
          echo "RELEASE_VERSION=$(go run $GITHUB_WORKSPACE/pkg/version/generate/release_generate.go print-rc-version)" >> $GITHUB_ENV
        else
          go run $GITHUB_WORKSPACE/pkg/version/bump --type ${{ inputs.releaseType }}
          echo "RELEASE_VERSION=$(go run $GITHUB_WORKSPACE/pkg/version/generate/release_generate.go print-version)" >> $GITHUB_ENV
        fi
    - name: Download release notes utility
      env:
        GH_REL_URL: https://github.com/buchanae/github-release-notes/releases/download/0.2.0/github-release-notes-linux-amd64-0.2.0.tar.gz
      run: cd /tmp && curl -sSL ${GH_REL_URL} | tar xz && sudo mv github-release-notes /usr/local/bin/
    - name: Generate release notes
      run: |
        mkdir -p ./output/nodes.md
        NOTES="./output/notes.md"
        echo '## Changelog' > ${NOTES}
        github-release-notes -org open-component-model -repo ocm -since-latest-release -include-author >> ${NOTES}
    - name: Create and push branch
      env:
        RELEASE_BRANCH: release-${{ env.RELEASE_VERSION }}
      run: |
        if ! git checkout ${RELEASE_BRANCH} >/dev/null; then
            echo "Creating ${RELEASE_BRANCH} from $(git branch --show-current)"
            git checkout -b ${RELEASE_BRANCH}
            git push origin "$(git branch --show-current)"
        else
            git checkout ${RELEASE_BRANCH}
            git pull --ff-only origin ${RELEASE_BRANCH}
        fi
    - name: Setup git config
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<41898282+github-actions[bot]@users.noreply.github.com>"
    - name: Create and push tag
      run: |
        msg="Release ${{ env.RELEASE_VERSION }}"
        git tag --annotate --message "${msg}" ${{ env.RELEASE_VERSION }}
        git push origin ${{ env.RELEASE_VERSION }}
    - name: Run goreleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        distribution: goreleaser
        version: latest
        args: release --config=./.goreleaser.yaml --release-notes=./output/notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GORELEASER_CURRENT_TAG: ${{ env.RELEASE_VERSION }}
